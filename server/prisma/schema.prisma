generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int       @id @default(autoincrement()) @map("user_id")
  email     String
  username  String
  password  String
  roles     Role[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  lastOnline DateTime @default(now()) @map("last_online")
  isOffline  Boolean  @default(true) @map("is_offline")

  profileName      String? @map("profile_name")
  profilePicture   Upload? @relation(fields: [profilePictureId], references: [uploadId])
  profilePictureId Int?    @map("profile_picture_id")
  bio              String?
  verification     Boolean @default(false)

  followers UserFollower[] @relation("Follower")
  following UserFollower[] @relation("Following")
  sessions  UserSession[]

  @@unique([email, username])
  @@index([userId, username, email])
  @@map("users")
}

model UserSession {
  sessionId Int      @id @default(autoincrement()) @map("session_id")
  userId    Int      @map("user_id")
  isActive  Boolean  @default(true) @map("is_active")
  ip        String?  @db.VarChar(120)
  browser   String?  @db.VarChar(50)
  os        String?  @db.VarChar(50)
  device    String?  @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [userId])

  @@unique([sessionId])
  @@index([userId, sessionId])
  @@map("user_session")
}

model UserFollower {
  folowingId  Int      @id @default(autoincrement()) @map("folowing_id")
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  followerUser  User @relation("Follower", fields: [followerId], references: [userId])
  followingUser User @relation("Following", fields: [followingId], references: [userId])

  @@map("users_followers")
}

model Role {
  roleId      Int    @id @default(autoincrement()) @map("role_id")
  roleName    String @unique @map("role_name")
  permissions Json
  users       User[]

  @@index([roleId])
  @@map("roles")
}

model Upload {
  uploadId    Int           @id @default(autoincrement()) @map("upload_id")
  url         String        @map("url")
  fileName    String        @map("file_name")
  fileType    Int           @map("file_type")
  fileSize    Int           @map("file_size")
  createdAt   DateTime      @default(now()) @map("created_at")
  deletedAt   DateTime?     @map("deleted_at")
  users       User[]
  postsUpload PostsUpload[]

  @@index([uploadId])
  @@map("uploads")
}

model Post {
  postId      Int           @id @default(autoincrement()) @map("post_id")
  userId      BigInt        @map("user_id")
  senderId    BigInt        @map("sender_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @map("updated_at")
  caption     String        @map("caption")
  deletedAt   DateTime?     @map("deleted_at")
  uploadCount Int           @default(0) @map("upload_count")
  uploads     PostsUpload[]

  @@index([postId, userId, senderId])
  @@map("posts")
}

model PostsUpload {
  uploadPostId Int    @id @default(autoincrement()) @map("upload_post_id")
  postId       Int    @map("post_id")
  uploadId     Int    @map("upload_id")
  upload       Upload @relation(fields: [uploadId], references: [uploadId])
  Post         Post?  @relation(fields: [postId], references: [postId])

  @@map("posts_uploads")
}

model Repost {
  repostId  Int      @id @default(autoincrement()) @map("repost_id")
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([postId])
  @@map("reposts")
}

model Comment {
  commentId       Int       @id @default(autoincrement()) @map("comment_id")
  postId          Int       @map("post_id")
  userId          Int       @map("user_id")
  message         String    @map("message")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @map("updated_at")
  attachmentCount Int       @default(0) @map("attachment_count")
  deletedAt       DateTime? @map("deleted_at")

  @@index([postId])
  @@map("comments")
}

model Like {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([postId])
  @@map("likes")
}
