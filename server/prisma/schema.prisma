generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  username  String    @db.VarChar(15)
  password  String    @db.VarChar(128)
  roles     Role[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  lastOnline DateTime @default(now()) @map("last_online")
  isOffline  Boolean  @default(true) @map("is_offline")

  profileName      String? @map("profile_name") @db.VarChar(50)
  profilePicture   Upload? @relation(fields: [profilePictureId], references: [id])
  profilePictureId Int?    @map("profile_picture_id")
  bio              String? @db.VarChar(160)
  verification     Boolean @default(false)

  followers UserFollower[] @relation("Follower")
  following UserFollower[] @relation("Following")
  sessions  UserSession[]

  uploads UserUpload[]

  @@unique([email, username])
  @@index([id, username, email])
  @@map("users")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  isActive  Boolean  @default(true) @map("is_active")
  ip        String?  @db.VarChar(120)
  browser   String?  @db.VarChar(50)
  os        String?  @db.VarChar(50)
  device    String?  @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id])

  @@unique([id])
  @@index([userId, id])
  @@map("user_session")
}

model UserFollower {
  id          Int      @id @default(autoincrement()) @map("id")
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  followerUser  User @relation("Follower", fields: [followerId], references: [id])
  followingUser User @relation("Following", fields: [followingId], references: [id])

  @@map("users_followers")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(255)
  permissions Json
  users       User[]

  @@index([id])
  @@map("roles")
}

model Upload {
  id         Int          @id @default(autoincrement())
  url        String       @db.VarChar(255)
  name       String       @db.VarChar(255)
  type       Int
  size       Int
  createdAt  DateTime     @default(now()) @map("created_at")
  deletedAt  DateTime?    @map("deleted_at")
  userUpload UserUpload[]
  postUpload PostUpload[]
  User       User[]

  @@index([id])
  @@map("uploads")
}

model UserUpload {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id")
  uploadId Int    @map("upload_id")
  upload   Upload @relation(fields: [uploadId], references: [id])
  User     User?  @relation(fields: [userId], references: [id])

  @@map("users_uploads")
}

model Post {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")

  senderId    Int          @map("sender_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @map("updated_at")
  caption     String       @map("caption") @db.VarChar(255)
  deletedAt   DateTime?    @map("deleted_at")
  uploadCount Int          @default(0) @map("upload_count")
  uploads     PostUpload[]

  @@index([id, userId, senderId])
  @@map("post")
}

model PostUpload {
  id       Int    @id @default(autoincrement())
  postId   Int    @map("post_id")
  uploadId Int    @map("upload_id")
  upload   Upload @relation(fields: [uploadId], references: [id])
  Post     Post?  @relation(fields: [postId], references: [id])

  @@map("posts_uploads")
}

model Repost {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([postId])
  @@map("reposts")
}

model Comment {
  id              Int       @id @default(autoincrement())
  postId          Int       @map("post_id")
  userId          Int       @map("user_id")
  message         String    @map("message") @db.VarChar(255)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @map("updated_at")
  attachmentCount Int       @default(0) @map("attachment_count")
  deletedAt       DateTime? @map("deleted_at")

  @@index([postId])
  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([postId])
  @@map("likes")
}

model ActivationCode {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  activationCode Int       @map("activation_code")
  expiryTime     DateTime  @map("expiry_time")
  activeAt       DateTime? @map("active_at")

  @@index([email])
  @@map("activations_code")
}
